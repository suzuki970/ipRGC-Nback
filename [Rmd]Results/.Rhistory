fit <- sem(model, data = tmp_df2, meanstructure = TRUE)
summary(fit, standardized=FALSE)
lavInspect(fit, "mean")
summary(fit)
summary(fit, fit.measures = TRUE, standardized = TRUE)
p = semPaths(fit,
# rotation = 2,
what = "Est",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
what = "std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
#
plot(p_all$p_pa2)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
sm$data
View(sm)
summary(fit, fit.measures = TRUE, standardized = TRUE)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
View(sm)
sm[["pe"]][["est"]]
View(fit)
View(fit)
parameterEstimates(fit, standardized = FALSE)
parameterEstimates(fit, standardized = FALSE)
equations <- list()
regression_params <- subset(estimates, op == "~")
regression_params <- subset(summary_fit, op == "~")
summary_fit <- parameterEstimates(fit, standardized = FALSE)
equations <- list()
regression_params <- subset(summary_fit, op == "~")
regression_params
regression_params
for (dep_var in unique(regression_params$lhs)) {
terms <- subset(regression_params, lhs == dep_var)
# 回帰式を作成
equation <- paste(dep_var, "~",
paste0(terms$est, " * ", terms$rhs, collapse = " + "))
# 回帰式をリストに追加
equations[[dep_var]] <- equation
}
equations
round(terms$est,3)
for (dep_var in unique(regression_params$lhs)) {
terms <- subset(regression_params, lhs == dep_var)
equation <- paste(dep_var, "~",
paste0(round(terms$est,4), " * ", terms$rhs, collapse = " + "))
equations[[dep_var]] <- equation
}
equations
regression_params <- subset(summary_fit, op == "~")
for (dep_var in unique(regression_params$lhs)) {
terms <- subset(regression_params, lhs == dep_var)
equation <- paste(dep_var, "~",
paste0(round(terms$est,3), " * ", terms$rhs, collapse = " + "))
equations[[dep_var]] <- equation
}
equations
fit <- sem(model, data = tmp_df2)
# summary(fit)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
what = "Est",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
#
# # plot(p_all$p_pa2)
p_all$p_pa2$size = c(4,3)
plot(p_all$p_pa2)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
# what = "Est",
what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
equations
regression_params
regression_params
library(lavaan)
library(semPlot)
library(semptools)
# df_pupil["Light"] = 1
# df_pupil[df_pupil["light"]=="low ipRGC",]["Light"] = 0
# tmp_data = df_pupil
# [df_pupil["Nback"]=="2-back",]
# tmp_df2 = tmp_df
tmp_df2 = tmp_df[tmp_df$Nback == "2-back",]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
# what = "Est",
what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
plot(p_all$p_pa2)
summary_fit <- parameterEstimates(fit, standardized = FALSE)
equations <- list()
regression_params <- subset(summary_fit, op == "~")
for (dep_var in unique(regression_params$lhs)) {
terms <- subset(regression_params, lhs == dep_var)
equation <- paste(dep_var, "~",
paste0(round(terms$est,3), " * ", terms$rhs, collapse = " + "))
equations[[dep_var]] <- equation
}
equations
View(tmp_df2)
tmp_df2 = tmp_df[tmp_df$Nback == "1-back",]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
# what = "Est",
what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
plot(p_all$p_pa2)
tmp_df2 = tmp_df[tmp_df$Nback == "1-back",]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
# what = "Est",
what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
plot(p_all$p_pa2)
tmp_df2 = tmp_df
# tmp_df2 = tmp_df[tmp_df$Nback == "1-back",]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
# what = "Est",
what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
plot(p_all$p_pa2)
tmp_df2 = tmp_df[tmp_df$Nback == "2-back",]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
sm = summary(fit, fit.measures = TRUE, standardized = TRUE)
summary(fit, fit.measures = TRUE, standardized = TRUE)
tmp_df2 = tmp_df
# tmp_df2 = tmp_df[tmp_df$Nback == "2-back",]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
# what = "Est",
what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
plot(p_all$p_pa2)
summary(fit, fit.measures = TRUE, standardized = TRUE)
tmp_df2 = tmp_df[tmp_df$Nback == "2-back",]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
summary(fit, fit.measures = TRUE, standardized = TRUE)
library(lavaan)
library(semPlot)
library(semptools)
# df_pupil["Light"] = 1
# df_pupil[df_pupil["light"]=="low ipRGC",]["Light"] = 0
# tmp_data = df_pupil
# [df_pupil["Nback"]=="2-back",]
tmp_df2 = tmp_df
# tmp_df2 = tmp_df[(tmp_df$Nback == "2-back"),]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
summary(fit, fit.measures = TRUE, standardized = TRUE)
m <- matrix(NA, 3, 3)
m[1, 2] <- "hit"
m[2, 2] <- "lightNum"
m[3, 1] <- "model_Sleepiness"
m[3, 3] <- "model_Fatigue"
p = semPaths(fit,
# rotation = 2,
# what = "Est",
what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
p_all$p_pa2$size = c(4,3)
p_all$regressout_sleepiness_fatigue = combineGraphs2(c("model_Sleepiness","model_Fatigue"),p_all,c(1,2))
p_all$regressout_sleepiness_fatigue$size=c(15,6)
summary_fit <- parameterEstimates(fit, standardized = FALSE)
equations <- list()
regression_params <- subset(summary_fit, op == "~")
for (dep_var in unique(regression_params$lhs)) {
terms <- subset(regression_params, lhs == dep_var)
equation <- paste(dep_var, "~",
paste0(round(terms$est,3), " * ", terms$rhs, collapse = " + "))
equations[[dep_var]] <- equation
}
equations
plot(p_all$p_pa2)
plot(p_all$p_pa2)
p = semPaths(fit,
# rotation = 2,
what = "Est",
# what = "Std",
# what = "paths",
edge.label.cex = 1.2,
# layout = "tree2",
edge.width = 0.3,
fade = FALSE,
style = "ram",
residuals = F,
nCharNodes = 0,
curvePivot = TRUE,
optimizeLatRes = TRUE,
intercepts = FALSE,
layout = m
)
p_all$p_pa2 <- mark_sig(p, fit)
plot(p_all$p_pa2)
(tmp_df$Nback == "2-back")
plot(p_all$p_pa2)
equations
plot(p_all$p_pa2)
for (dep_var in unique(regression_params$lhs)) {
terms <- subset(regression_params, lhs == dep_var)
equation <- paste(dep_var, "~",
paste0(round(terms$est,4), " * ", terms$rhs, collapse = " + "))
equations[[dep_var]] <- equation
}
equations <- list()
regression_params <- subset(summary_fit, op == "~")
for (dep_var in unique(regression_params$lhs)) {
terms <- subset(regression_params, lhs == dep_var)
equation <- paste(dep_var, "~",
paste0(round(terms$est,4), " * ", terms$rhs, collapse = " + "))
equations[[dep_var]] <- equation
}
equations
equation
regression_params
regression_params
subset(summary_fit, op == "~")
summary_fit <- parameterEstimates(fit, standardized = FALSE)
summary_fit
equations
plot(p_all$p_pa2)
plot(p_all$p_pa2)
summary(fit, fit.measures = TRUE, standardized = TRUE)
fit <- sem(model, data = tmp_df2, se = "bootstrap", bootstrap = 1000)
std_solution_boot <- standardizedSolution(fit)
print(std_solution_boot)
print(std_solution_boot)
fit <- sem(model, data = tmp_df2, se = "bootstrap", bootstrap = 10000)
std_solution_boot <- standardizedSolution(fit)
print(std_solution_boot)
print(std_solution_boot)
>
print(std_solution_boot)
summary(fit)
summary(fit, fit.measures = TRUE, standardized = TRUE)
tmp_df2 = tmp_df
# tmp_df2 = tmp_df[(tmp_df$Nback == "2-back"),]
model <- '
hit ~ lightNum
hit ~ model_Sleepiness
hit ~ model_Fatigue
model_Sleepiness ~ lightNum
model_Fatigue ~ lightNum
model_Sleepiness ~~ model_Fatigue
'
fit <- sem(model, data = tmp_df2)
# summary(fit)
summary(fit, fit.measures = TRUE, standardized = TRUE)
